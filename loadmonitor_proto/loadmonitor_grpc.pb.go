// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: loadmonitor.proto

package loadmonitor_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoadMonitor_LoadData_FullMethodName = "/loadmonitor.LoadMonitor/LoadData"
)

// LoadMonitorClient is the client API for LoadMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadMonitorClient interface {
	LoadData(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*MetricsAck, error)
}

type loadMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadMonitorClient(cc grpc.ClientConnInterface) LoadMonitorClient {
	return &loadMonitorClient{cc}
}

func (c *loadMonitorClient) LoadData(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*MetricsAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetricsAck)
	err := c.cc.Invoke(ctx, LoadMonitor_LoadData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadMonitorServer is the server API for LoadMonitor service.
// All implementations must embed UnimplementedLoadMonitorServer
// for forward compatibility.
type LoadMonitorServer interface {
	LoadData(context.Context, *Metrics) (*MetricsAck, error)
	mustEmbedUnimplementedLoadMonitorServer()
}

// UnimplementedLoadMonitorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoadMonitorServer struct{}

func (UnimplementedLoadMonitorServer) LoadData(context.Context, *Metrics) (*MetricsAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadData not implemented")
}
func (UnimplementedLoadMonitorServer) mustEmbedUnimplementedLoadMonitorServer() {}
func (UnimplementedLoadMonitorServer) testEmbeddedByValue()                     {}

// UnsafeLoadMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadMonitorServer will
// result in compilation errors.
type UnsafeLoadMonitorServer interface {
	mustEmbedUnimplementedLoadMonitorServer()
}

func RegisterLoadMonitorServer(s grpc.ServiceRegistrar, srv LoadMonitorServer) {
	// If the following call pancis, it indicates UnimplementedLoadMonitorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoadMonitor_ServiceDesc, srv)
}

func _LoadMonitor_LoadData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadMonitorServer).LoadData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadMonitor_LoadData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadMonitorServer).LoadData(ctx, req.(*Metrics))
	}
	return interceptor(ctx, in, info, handler)
}

// LoadMonitor_ServiceDesc is the grpc.ServiceDesc for LoadMonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadMonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loadmonitor.LoadMonitor",
	HandlerType: (*LoadMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadData",
			Handler:    _LoadMonitor_LoadData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loadmonitor.proto",
}

const (
	UserInput_ScanParams_FullMethodName = "/loadmonitor.UserInput/ScanParams"
)

// UserInputClient is the client API for UserInput service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInputClient interface {
	ScanParams(ctx context.Context, in *UserParams, opts ...grpc.CallOption) (*UserParamsAck, error)
}

type userInputClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInputClient(cc grpc.ClientConnInterface) UserInputClient {
	return &userInputClient{cc}
}

func (c *userInputClient) ScanParams(ctx context.Context, in *UserParams, opts ...grpc.CallOption) (*UserParamsAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserParamsAck)
	err := c.cc.Invoke(ctx, UserInput_ScanParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInputServer is the server API for UserInput service.
// All implementations must embed UnimplementedUserInputServer
// for forward compatibility.
type UserInputServer interface {
	ScanParams(context.Context, *UserParams) (*UserParamsAck, error)
	mustEmbedUnimplementedUserInputServer()
}

// UnimplementedUserInputServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserInputServer struct{}

func (UnimplementedUserInputServer) ScanParams(context.Context, *UserParams) (*UserParamsAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanParams not implemented")
}
func (UnimplementedUserInputServer) mustEmbedUnimplementedUserInputServer() {}
func (UnimplementedUserInputServer) testEmbeddedByValue()                   {}

// UnsafeUserInputServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInputServer will
// result in compilation errors.
type UnsafeUserInputServer interface {
	mustEmbedUnimplementedUserInputServer()
}

func RegisterUserInputServer(s grpc.ServiceRegistrar, srv UserInputServer) {
	// If the following call pancis, it indicates UnimplementedUserInputServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserInput_ServiceDesc, srv)
}

func _UserInput_ScanParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInputServer).ScanParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInput_ScanParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInputServer).ScanParams(ctx, req.(*UserParams))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInput_ServiceDesc is the grpc.ServiceDesc for UserInput service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInput_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loadmonitor.UserInput",
	HandlerType: (*UserInputServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanParams",
			Handler:    _UserInput_ScanParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loadmonitor.proto",
}
